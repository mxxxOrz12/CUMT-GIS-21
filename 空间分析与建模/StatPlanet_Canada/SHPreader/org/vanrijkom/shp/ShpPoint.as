/* ************************************************************************ *//**//*  SHP (ESRI ShapeFile Reader)*//*  Copyright (c)2007 Edwin van Rijkom*//*  http://www.vanrijkom.org*//**//* This library is free software; you can redistribute it and/or*//* modify it under the terms of the GNU Lesser General Public*//* License as published by the Free Software Foundation; either*//* version 2.1 of the License, or (at your option) any later version.*//**//* This library is distributed in the hope that it will be useful,*//* but WITHOUT ANY WARRANTY; without even the implied warranty of*//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU*//* Lesser General Public License or the LICENSE file for more details.*//**//* ************************************************************************ */package org.vanrijkom.shp{	import flash.utils.ByteArray;	import flash.utils.Endian;	/**	 * The ShpPoint class parses an ESRI Shapefile Point record from a ByteArray.	 * @author Edwin van Rijkom	 * 	 */	public class ShpPoint extends ShpObject {		/**		 * Constructor		 * @throws ShpError Not a Point record 		 */		public var x: Number; 		public var y: Number;		//public var x: Object = new Object();		//public var y: Object = new Object();		public function ShpPoint(src: ByteArray = null, size: uint = 0) {			type = ShpType.SHAPE_POINTZ;			if (src) {				if (src.length - src.position < size) {					throw new ShpError("Not a Point record (to small)");				}				x = (size > 0)? src.readDouble() : NaN;				y = (size > 8) ? src.readDouble() : NaN;				//x.reg = (size > 0)? src.readDouble() : NaN;				//y.reg = (size > 8) ? src.readDouble() : NaN;								//applyPointTransformations(x.reg, y.reg);			}		}				/*private function applyPointTransformations(long, lat) {			var latRadians = lat * Math.PI/180;			var longRadians = long * Math.PI/180;			var longCenter = -1;			var latCenter = 44.138 * Math.PI/180;						x.MERCATOR = long;			y.MERCATOR = (180/Math.PI) * Math.log(Math.tan(latRadians) + (1/Math.cos(latRadians)));						var c = Math.acos(Math.sin(latCenter)*Math.sin(latRadians)+Math.cos(latCenter)*Math.cos(latRadians)*Math.cos(longRadians-longCenter));			var kprime = c/Math.sin(c);			x.AZIMUTHAL = (180/Math.PI) * ((kprime) * (Math.cos(latRadians)) * (Math.sin(longRadians - longCenter)));			y.AZIMUTHAL = (180/Math.PI) * ((kprime) * ((Math.cos(latCenter)*Math.sin(latRadians))-(Math.sin(latCenter)*Math.cos(latRadians)*Math.cos(longRadians-longCenter))));						x.EQUALAREA =  (180/Math.PI) * ((longRadians - longCenter) * Math.cos(latCenter));			y.EQUALAREA =  (180/Math.PI) * (Math.sin(latRadians) * (1/Math.cos(latCenter)));		}*/	}}// package